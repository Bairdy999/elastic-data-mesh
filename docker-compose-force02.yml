version: "3.8"


volumes:
 certs:
   driver: local
 esdata02:
   driver: local
 kibanadata02:
#   - type: bind
#     source: /mnt/data/kibana/kibana.yml
#     target: /usr/share/kibana/config/kibana.yml
   driver: local
 metricbeatdata01:
   driver: local
 filebeatdata01:
   driver: local
 logstashdata01:
   driver: local


networks:
 default:
   name: elastic02
   external: false


services:
 setup02:
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION_02}
   volumes:
     - /mnt/data/certs/force02:/usr/share/elasticsearch/config/certs
   user: "0"
   command: >
     bash -c '
       if [ x${ELASTIC_PASSWORD_02} == x ]; then
         echo "Set the ELASTIC_PASSWORD_02 environment variable in the .env file";
         exit 1;
       elif [ x${KIBANA_PASSWORD_02} == x ]; then
         echo "Set the KIBANA_PASSWORD_02 environment variable in the .env file";
         exit 1;
       fi;
       if [ ! -f config/certs/ca.zip ]; then
         echo "Creating CA";
         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
         unzip config/certs/ca.zip -d config/certs;
       fi;
       if [ ! -f config/certs/certs.zip ]; then
         echo "Creating certs";
         echo -ne \
         "instances:\n"\
         "  - name: es02\n"\
         "    dns:\n"\
         "      - es02\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: kibana02\n"\
         "    dns:\n"\
         "      - kibana02\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         > config/certs/instances.yml;
         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
         unzip config/certs/certs.zip -d config/certs;
       fi;
       echo "Setting file permissions"
       chown -R root:root config/certs;
       find . -type d -exec chmod 750 \{\} \;;
       find . -type f -exec chmod 640 \{\} \;;
       echo "Waiting for Elasticsearch availability";
       until curl -s --cacert config/certs/ca/ca.crt https://es02:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       echo "Setting kibana_system password";
       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD_02}" -H "Content-Type: application/json" https://es02:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD_02}\"}" | grep -q "^{}"; do sleep 10; done;
       echo "All done!";
     '
   healthcheck:
     test: ["CMD-SHELL", "[ -f config/certs/es02/es02.crt ]"]
     interval: 1s
     timeout: 5s
     retries: 120

 es02:
   depends_on:
     setup02:
       condition: service_healthy
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION_02}
   labels:
     co.elastic.logs/module: elasticsearch
   user: "110"
   volumes:
     - /mnt/data/certs/force02:/usr/share/elasticsearch/config/certs
     - /mnt/data/elastic/force02:/usr/share/elasticsearch/data
   ports:
     - ${ES_PORT_02}:9200
   environment:
     - node.name=es02
     - cluster.name=${CLUSTER_NAME_02}
     - discovery.type=single-node
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD_02}
     - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
     - bootstrap.memory_lock=true
     - xpack.security.enabled=true
     - xpack.security.http.ssl.enabled=true
     - xpack.security.http.ssl.key=certs/es02/es02.key
     - xpack.security.http.ssl.certificate=certs/es02/es02.crt
     - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.enabled=true
     - xpack.security.transport.ssl.key=certs/es02/es02.key
     - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
     - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.verification_mode=certificate
     - xpack.license.self_generated.type=${LICENSE_02}
     - http.port=9200
   ulimits:
     memlock:
       soft: -1
       hard: -1
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
       ]
     interval: 10s
     timeout: 10s
     retries: 10

 kibana02:
   depends_on:
     es02:
       condition: service_healthy
   image: docker.elastic.co/kibana/kibana:${STACK_VERSION_02}
   labels:
     co.elastic.logs/module: kibana
   volumes:
     - /mnt/data/certs/force02:/usr/share/kibana/config/certs
     - /mnt/data/kibana/force02:/usr/share/kibana/data
     - /mnt/data/kibana/force02/kibana.yml:/usr/share/kibana/config/kibana.yml
   user: "110"
   ports:
     - ${KIBANA_PORT_02}:5601
   environment:
     - SERVERNAME=kibana02
#     - ELASTICSEARCH_HOSTS=https://es02:${ES_PORT_02}
     - ELASTICSEARCH_HOSTS=https://es02:9200
     - ELASTICSEARCH_USERNAME=kibana_system
     - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD_02}
     - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
     - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - SERVER_PORT=5601
   mem_limit: ${KB_MEM_LIMIT}
   healthcheck:
     test:
       [
         "CMD-SHELL",
#         "curl -s -I http://localhost:${KIBANA_PORT_02} | grep -q 'HTTP/1.1 302 Found'",
         "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
       ]
     interval: 10s
     timeout: 10s
     retries: 10